#include "../Elements/MyHelper.h"

namespace Elements {

	string MyHelper::GetSafePrime(unsigned short numberOfDigits){
		switch(numberOfDigits){
			case 20:
				return "99999999999999998953";
			case 21:
				return "999999999999999999067";
			case 22:
				return "9999999999999999999869";
			case 23:
				return "99999999999999999999163";
			case 24:
				return "999999999999999999998483";
			case 25:
				return "9999999999999999999999169";
			case 26:
				return "99999999999999999999996851";
			case 27:
				return "999999999999999999999996013";
			case 28:
				return "9999999999999999999999999721";
			case 29:
				return "99999999999999999999999999899";
			case 30:
				return "999999999999999999999999997603";
			case 31:
				return "9999999999999999999999999995473";
			case 32:
				return "99999999999999999999999999997297";
			case 33:
				return "999999999999999999999999999997861";
			case 34:
				return "9999999999999999999999999999996269";
			case 35:
				return "99999999999999999999999999999998251";
			case 36:
				return "999999999999999999999999999999998059";
			case 37:
				return "9999999999999999999999999999999999371";
			case 38:
				return "99999999999999999999999999999999999761";
			case 39:
				return "999999999999999999999999999999999998413";
			case 40:
				return "9999999999999999999999999999999999999769";
			case 41:
				return "99999999999999999999999999999999999998983";
			case 42:
				return "999999999999999999999999999999999999995747";
			case 43:
				return "9999999999999999999999999999999999999998789";
			case 44:
				return "99999999999999999999999999999999999999997829";
			case 45:
				return "999999999999999999999999999999999999999997007";
			case 46:
				return "9999999999999999999999999999999999999999998891";
			case 47:
				return "99999999999999999999999999999999999999999995003";
			case 48:
				return "999999999999999999999999999999999999999999995047";
			case 49:
				return "9999999999999999999999999999999999999999999996367";
			case 50:
				return "99999999999999999999999999999999999999999999987523";
			case 51:
				return "999999999999999999999999999999999999999999999999353";
			case 52:
				return "9999999999999999999999999999999999999999999999998873";
			case 53:
				return "99999999999999999999999999999999999999999999999996401";
			case 54:
				return "999999999999999999999999999999999999999999999999998161";
			case 55:
				return "9999999999999999999999999999999999999999999999999999889";
			case 56:
				return "99999999999999999999999999999999999999999999999999992051";
			case 57:
				return "999999999999999999999999999999999999999999999999999998177";
			case 58:
				return "9999999999999999999999999999999999999999999999999999998201";
			case 59:
				return "99999999999999999999999999999999999999999999999999999997777";
			case 60:
				return "999999999999999999999999999999999999999999999999999999997537";
			case 61:
				return "9999999999999999999999999999999999999999999999999999999985321";
			case 62:
				return "99999999999999999999999999999999999999999999999999999999996959";
			case 63:
				return "999999999999999999999999999999999999999999999999999999999974917";
			case 64:
				return "9999999999999999999999999999999999999999999999999999999999993043";
			case 65:
				return "99999999999999999999999999999999999999999999999999999999999998963";
			case 66:
				return "999999999999999999999999999999999999999999999999999999999999991223";
			case 67:
				return "9999999999999999999999999999999999999999999999999999999999999993517";
			case 68:
				return "99999999999999999999999999999999999999999999999999999999999999993017";
			case 69:
				return "999999999999999999999999999999999999999999999999999999999999999986719";
			case 70:
				return "9999999999999999999999999999999999999999999999999999999999999999983003";
			case 71:
				return "99999999999999999999999999999999999999999999999999999999999999999998401";
			case 72:
				return "999999999999999999999999999999999999999999999999999999999999999999975157";
			case 73:
				return "9999999999999999999999999999999999999999999999999999999999999999999995581";
			case 74:
				return "99999999999999999999999999999999999999999999999999999999999999999999989893";
			case 75:
				return "999999999999999999999999999999999999999999999999999999999999999999999988313";
			case 76:
				return "9999999999999999999999999999999999999999999999999999999999999999999999993191";
			case 77:
				return "99999999999999999999999999999999999999999999999999999999999999999999999985871";
			case 78:
				return "999999999999999999999999999999999999999999999999999999999999999999999999964699";
			case 79:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999523";
			case 80:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999988073";
			case 81:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999985607";
			case 82:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999966751";
			case 83:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999997151";
			case 84:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999997417";
			case 85:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999996967";
			case 86:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999999987553";
			case 87:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999999980777";
			case 88:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999999991657";
			case 89:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999999999959239";
			case 90:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999999999987757";
			case 91:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999877";
			case 92:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999992449";
			case 93:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999960083";
			case 94:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999992579";
			case 95:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999982373";
			case 96:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999976007";
			case 97:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999992111";
			case 98:
				return "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999984421";
			case 99:
				return "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999952939";
			case 100:
				return "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999962249";
			default:
				printf("Error: Elements::Elements::GetSafePrime\n");
				throw;
		}
	}

	string MyHelper::GetSemiPrime(unsigned short numberOfDigits){
		switch(numberOfDigits){




			default:
				printf("Error: Elements::Elements::GetSemiPrime\n");
				throw;
		}
	}

	void MyHelper::PrintMatrix(vector<vector<bool>> matrix){
		for(vector<bool> row : matrix){
			for(bool element : row){
				printf("%d", element);
			}
			printf("\n");
		}
	}

	vector<vector<bool>> MyHelper::GetIdentityMatrix(long long size){
		vector<vector<bool>> r = {};
		for(long long i = 0; i < size; i++){
			vector<bool> row = vector<bool>(size, false);
			r.push_back(row);
			r[i][i] = true;
		}
		return r;
	}

	void MyHelper::FitIdentityMatrix(vector<vector<bool>> &MU, long long size){
		for(long long i = 0; i < MU.size(); i++){
			MU[i].resize(size);
		}
		for(long long i = MU.size(); i < size; i++){
			vector<bool> row = vector<bool>(size, false);
			MU.push_back(row);
			MU[i][i] = true;
		}
	}

	void MyHelper::PowCExpD(mpz_t r, mpz_t c, mpz_t d){
		mpz_t i;
		mpz_inits(i, NULL);
		mpz_set_ui(r, 1);
		for(mpz_set_ui(i, 0); mpz_cmp(i, d) < 0; mpz_add_ui(i, i, 1)){
			mpz_mul(r, r, c);
		}
		mpz_clears(i, NULL);
	}
}
